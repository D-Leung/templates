#+Title: Cpp Templates
#+Author: Evan Misshula
#+Email: emisshula@jjay.cuny.edu

#+TAGS:       Write(w) Update(u) Fix(f) Check(c) noexport(n) export(e)
#+OPTIONS: reveal_center:t reveal_progress:t reveal_history:nil reveal_control:t
#+OPTIONS: reveal_mathjax:t reveal_rolling_links:t reveal_keyboard:t reveal_overview:t num:nil
#+OPTIONS: reveal_width:1200 reveal_height:800
#+OPTIONS: toc:nil
#+OPTIONS: reveal_mathjax_url:file:///MathJax/MathJax.js
#+REVEAL_MARGIN: 0.1
#+REVEAL_MIN_SCALE: 0.5
#+REVEAL_MAX_SCALE: 2.5
#+REVEAL_TRANS: cube
#+REVEAL_THEME: simple
#+REVEAL_HLEVEL: 1
#+REVEAL_HEAD_PREAMBLE: <meta name="description" content="Org-Reveal Introduction.">
#+REVEAL_POSTAMBLE: <p> Created by Evan Misshula. </p>
#+REVEAL_PLUGINS: (highlight markdown)

** Templates
1. Type-independent patterns that can work with multiple data types.
   + Generic programming
   + Code reusable
2. Function Templates
   + These define logic behind the algorithms that work for multiple data types.
3. Class Templates
   + These define generic class patterns into which specific data types can be plugged in to produce new classes.
** Function and function templates
- C++ routines work on specific types. We often need to write
  different routines to perform the same operation on different data
  types.
#+BEGIN_SRC c++
int maximum(int a, int b, int c) { 
      int max = a; 
      if (b > max) max = b; 
      if (c > max) max = c; 
      return max; 
}
#+END_SRC
